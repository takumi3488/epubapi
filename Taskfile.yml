version: "3"

env:
  DATABASE_URL: "postgresql://postgres:postgres@localhost:5432/epubapi"
  IMAGES_BUCKET: "images-bucket"
  EPUB_BUCKET: "epub-bucket"
  OUT_IMAGES_BUCKET: "out-images-bucket"
  S3_ENDPOINT: "http://localhost:9000"
  PUBLIC_S3_ENDPOINT: "http://localhost:9000"
  ADMIN_ID: "test_admin_id"
  ADMIN_PASSWORD: "test_admin_password"
  JWT_SECRET: "jwt_secret"
  AWS_REGION: us-east-1
  AWS_ACCESS_KEY_ID: admin
  AWS_SECRET_ACCESS_KEY: minio123

tasks:
  default:
    cmds:
      - task: all

  install:lima:
    cmds:
      - brew install lima
      - limactl start --name=default template://docker

  install:sqlx-cli:
    cmds:
      - cargo install sqlx-cli --no-default-features --features native-tls,postgres
  
  install:julia:
    cmds:
      - curl -fsSL https://install.julialang.org | sh -s -- -y
      - $HOME/.juliaup/bin/julia -e 'using Pkg; Pkg.add("Plots"); Pkg.add("Metal")'
      - echo 'export PATH="$HOME/.juliaup/bin:$PATH"' >> $HOME/.zshrc

  install:docker-compose:
    cmds:
      - curl -L "https://download.docker.com/mac/static/stable/aarch64/docker-27.2.0.tgz" -o docker.tgz
      - tar -xvzf docker.tgz
      - mv docker/docker ${HOME}/.local/bin
      - mkdir -p ${HOME}/.docker/cli-plugins
      - curl -SL "https://github.com/docker/compose/releases/download/v2.29.2/docker-compose-darwin-aarch64" -o ${HOME}/.docker/cli-plugins/docker-compose
      - chmod +x ${HOME}/.docker/cli-plugins/docker-compose

  ci:prepare:
    cmds:
      - mkdir -p ${HOME}/.local/bin

  ci:
    env:
      DOCKER_HOST: unix://$HOME/.lima/default/sock/docker.sock
    deps:
      - install:lima
      - install:sqlx-cli
      - install:julia
      - install:docker-compose
    cmds:
      - zsh -c ". $HOME/.zshrc && cd test_assets && julia gen_test_data.jl"
      - docker compose down
      - docker compose up --build -d minio postgres
      - docker compose up --build create_bucket
      - cargo build
      - cargo sqlx prepare --database-url ${DATABASE_URL}
      - cargo run --bin gen_schema > openapi.json
      - cargo run --bin img2epub
      - cargo run --bin get_metadata
      - cargo run --bin epub2img
      - cargo test

  serve:
    cmds:
      - task: up
      - task: run

  schema:
    cmds:
      - cargo run --bin gen_schema > openapi.json

  test:
    cmds:
      - cargo test

  rebuild:
    cmds:
      - zsh -c ". $HOME/.zshrc && cd test_assets && julia gen_test_data.jl"
      - docker compose down
      - task: up

  up:
    cmds:
      - docker compose up --build -d minio postgres
      - docker compose up --build create_bucket
      - cargo build
      - task: sqlx
      - task: schema

  run:
    cmds:
      - cargo run

  sqlx:
    cmds:
      - cargo sqlx prepare --database-url ${DATABASE_URL}

  check:
    cmds:
      - task: sqlx
      - cargo check
      - task: schema

  all:
    cmds:
      - task: rebuild
      - cargo run --bin img2epub
      - cargo run --bin get_metadata
      - cargo run --bin epub2img
      - task: test

  tmp:
    cmds:
      - cargo run --bin epub2img
